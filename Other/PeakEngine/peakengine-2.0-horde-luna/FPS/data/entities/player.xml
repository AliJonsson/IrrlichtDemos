<?xml version="1.0" standalone="yes"?>
<entity base="player">
	<name>Player with character physics</name>

	<property name="position" type="alias" value="playerbody.position" />
	<property name="rotation" type="vector3" reliable="false"/>
	<property name="hitpoints" type="integer" value="100" />
	<property name="shooting" type="integer" value="100" />

	<script place="server">
	<![CDATA[
		forward = 0;
		back = 0;
		left = 0;
		right = 0;
		onground = false;
		shoot = 0;
		sprint = 0;
		setriflespeed = 40;

		function PickingCallback()
			if (pickingcallback:getInfo().object == nil) then
				return;
			end
			picked = pickingcallback:getInfo().object:getEntity();
			if (picked ~= nil) then
				if (pickedlabel ~= nil) then
					pickedlabel:setLabel(picked:getName());
				end
			end
		end
		
		function hit(damage)
			hitpoints:set(hitpoints:getInt() - damage);
		end
	]]>
	</script>
	<script place="local">
	<![CDATA[

		camera = peak.GraphicsEngine:get():getStandardCamera();
		rifle = peak.MeshSceneNode:new("rifle.scene.xml", false, camera);
		rifle:setRotation(peak.Vector3D(0, -math.pi / 2, 0));
		rifle:setPosition(peak.Vector3D(0.2, -0.3, -1));
		rifle:setScale(peak.Vector3D(0.1, 0.1, 0.1));
		muzzleflash = peak.MeshSceneNode:new("muzzleflash.scene.xml", false, rifle);
		muzzleflash:setRotation(peak.Vector3D(0, math.pi / 2, 0));
		muzzleflash:setPosition(peak.Vector3D(-5.5, 1.7, -1));
	
		function OnCreate()
			overlay = peak.TextureOverlay:new("crosshair.material.xml");
			overlay:setPosition(peak.Vector2D(0.4, 0.4));
			overlay:setSize(peak.Vector2D(0.2, 0.2));
		end
	]]>
	</script>
	<script>
	<![CDATA[
		shootcooldown = 0;
		
		if (entity:isLocal() ~= true) then
			rifle = peak.MeshSceneNode:new("rifle.scene.xml", false, playernode);
			rifle:setRotation(peak.Vector3D(0, -math.pi / 2, 0));
			rifle:setPosition(peak.Vector3D(0.2, 1.2, -1));
			rifle:setScale(peak.Vector3D(0.1, 0.1, 0.1));
			muzzleflash = peak.MeshSceneNode:new("muzzleflash.scene.xml", false, rifle);
			muzzleflash:setRotation(peak.Vector3D(0, math.pi / 2, 0));
			muzzleflash:setPosition(peak.Vector3D(-5.5, 1.7, -1.1));
		end
		
		--target = peak.MeshSceneNode:new("cube.scene.xml");
		--target:setScale(peak.Vector3D(0.1, 0.1, 0.1));

		script = entity:getScript();
		--callback = peak.RayCallback:new();
		--callback:create(peak.Vector3D(0,-0.1,0) , peak.Vector3D(0,-1.1,0), script, "RayCallback");
		
		pickingcallback = peak.RayCallback:new();
		pickingcallback:create(peak.Vector3D(0,1.5,0) , peak.Vector3D(0,-2,0), script, "PickingCallback");

		function OnUpdate(msecs)
			-- Reset position based on ray cast
			--[[local pos = playerbody:getPosition();
			onground = false;
			callback:setRay(peak.Vector3D(pos.x, pos.y, pos.z), peak.Vector3D(pos.x, pos.y - 2, pos.z));--]]
			
			-- Update picking ray
			local pickingray = peak.Vector3D(0, 0, -5);
			local camrotation = rotation:getVector3D();
			camrotation.y = -camrotation.y;
			pickingray:rotate(camrotation);
			pickingray.x = pos.x + pickingray.x;
			pickingray.y = pos.y + pickingray.y + 0.5;
			pickingray.z = pos.z + pickingray.z;
			pickingcallback:setRay(peak.Vector3D(pos.x, pos.y + 0.5, pos.z), peak.Vector3D(pickingray.x, pickingray.y, pickingray.z));
			if (entity:isLocal()) then
				pickedlabel:setLabel("");
			end
			
			rot = rotation:getVector3D();
			playerbody:setRotation(peak.Quaternion(peak.Vector3D(0, rot.y, 0)));
			
			shootcooldown = shootcooldown + msecs;
			
			if (peak.Game:get():isClient()) then
				muzzleflash:setVisible(false);
			end
			
			if (shootcooldown > 200 and shooting:getInt() == 1) then
				print("shoot.");
				if (peak.Game:get():isServer()) then
					-- Shoot
					local shootray = peak.Vector3D(0, 0, -100);
					local camrotation = rotation:getVector3D();
					camrotation.y = -camrotation.y;
					shootray:rotate(camrotation);
					shootray.x = pos.x + shootray.x;
					shootray.y = pos.y + shootray.y + 0.5;
					shootray.z = pos.z + shootray.z;
					collisionresult = peak.Game:get():getWorld():castRay(peak.Vector3D(pos.x, pos.y + 0.5, pos.z), shootray);
					--target:setPosition(collisionresult.point);
					if (collisionresult.object ~= nil) then
						hitentity = collisionresult.object:getEntity();
						if (hitentity ~= nil) then
							print("Collision: "..hitentity:getName());
							if (hitentity:getScript():isFunction("hit") == true) then
								hitentity:getScript():callFunctionI("hit", 5);
							end
						end
					end
					
				end
				if (peak.Game:get():isClient()) then
					muzzleflash:setVisible(true);
				end
				shootcooldown = 0;
			end
			
			--moving
			--[[if (peak.Game:get():isServer()) then
				if forward + back + left + right > 0 then
					moving = 1;
				else
					moving = 0;
				end
			else
				if math.abs(playerbody:getLinearVelocity().x) + math.abs(playerbody:getLinearVelocity().y) > 0 then
					moving = 1;
				else
					moving = 0;
				end
			end
			
			--movement
			--riflespeed ist the speed of the moving rifle (10 = fast; 80 slow)
			--to set the riflespeed use the var setriflespeed
			--riflemovement is controlling the animation, do not change it
			if (peak.Game:get():isServer()) then
				--movement server
				if riflemovement == nil then
					riflemovement = 0;
				end
				if riflemovement == 0 and riflespeed ~= setriflespeed then
					riflespeed = setriflespeed;
				end
				if moving ~= 0 or riflemovement ~= 0 then
					if riflemovement < riflespeed then
						rifle:setPosition(peak.Vector3D(rifle:getPosition().x,rifle:getPosition().y+(0.02/riflespeed),rifle:getPosition().z));
						riflemovement = riflemovement + 1;
					elseif riflemovement < riflespeed * 2 then
						rifle:setPosition(peak.Vector3D(rifle:getPosition().x,rifle:getPosition().y-(0.02/riflespeed),rifle:getPosition().z));
						riflemovement = riflemovement + 1;
					else
						riflemovement = 0;
					end
				end
				if moving == 0 and riflemovement < riflespeed and riflemovement ~= 0 then
					riflemovement = riflespeed * 2 - riflemovement;
				end
			else
				--movement client
				if riflemovementc == nil then
					riflemovementc = 0;
				end
				if moving ~= 0 or riflemovementc ~= 0 then
					if riflemovementc < riflespeed then
						rifle:setPosition(peak.Vector3D(rifle:getPosition().x,rifle:getPosition().y+0.0005,rifle:getPosition().z));
						riflemovementc = riflemovementc + 1;
					elseif riflemovementc < riflespeed * 2 then
						rifle:setPosition(peak.Vector3D(rifle:getPosition().x,rifle:getPosition().y-0.0005,rifle:getPosition().z));
						riflemovementc = riflemovementc + 1;
					else
						riflemovementc = 0;
					end
				end
				if moving == 0 and riflemovementc < riflespeed and riflemovementc ~= 0 then
					riflemovementc = riflespeed * 2 - riflemovementc;
				end
			end
			--falling damage
			damageheight = -0.2;
			if peak.Game:get():isClient() and rotation ~= nil then
				if falling == nil then
					falling = 0;
				end
				if oldposition == nil then
					oldposition = position:getVector3D();
				end
				if damage == nil then
					damage = false;
				end
				falling = position:getVector3D().y - oldposition.y;
				oldposition = position:getVector3D();
				if falling <= damageheight then
					damage = true;
					height = falling;
					--print("fall ; falling = "..falling);
				end
				if math.abs(falling) <= 0.01 and math.abs(falling) > 0 and damage == true then
					hit(10*1.3^math.abs(height * 10));
					--print("hittheground ; falling = "..falling);
					damage = false;
				end
			end--]]
		end

	]]>
	</script>

	<body name="playerbody" deactivation="false">
		<scenenode name="playernode" type="mesh" file="human.scene.xml" scale="1/1/1" position="0/-1/0" />
		<shape name="playershape" type="box" scale="0.6/2/0.4" mass="50" />
	</body>

	<link name="zlink" type="script" source="input.KeyChanged" filter="forward/back" owneronly="true" place="server">
		entity:setMovement(forward, back, left, right);
	</link>
	<link name="xlink" type="script" source="input.KeyChanged" filter="left/right" owneronly="true" place="server">
		entity:setMovement(forward, back, left, right);
	</link>
	<link name="shootlink" type="script" source="input.KeyChanged" filter="shoot" owneronly="true" place="server">
		shooting:set(shoot);	
	</link>
	<link name="sprintlink" type="script" source="input.KeyChanged" filter="sprint" owneronly="true" place="server">
	</link>
	<link name="mouselink" type="script" source="input.MouseMoved" place="local">
	<![CDATA[
		rot = rotation:getVector3D();
		rot.y = rot.y - X * 0.01;
		rot.x = rot.x - Y * 0.01;
		rotation:set(rot);
		entity:setRotation(rot.y);
	]]>
	</link>
	<link name="rotationbodylink" type="script" source="rotation" >
	<![CDATA[
		rot = rotation:getVector3D();
		rot.x = 0;
		rot.z = 0;
		playerbody:setRotation(peak.Quaternion(rot));
	]]>
	</link>
	<link name="positionlink" type="script" source="position">
	<![CDATA[
		if camera ~= nil then
			pos = position:getVector3D();
			-- Calculate offset
			pos.y = pos.y + 0.5;
			cameraposprop = camera:getProperty("position");
			cameraposprop:set(pos);
		end
	]]>	
	</link>
	<link name="rotationlink" type="script" source="rotation" place="local">
	<![CDATA[
		if camera ~= nil then
			camrotation = rotation:getVector3D();
			if camrotation.x < -1.5 then
				camrotation.x = -1.5;
				rotation:set(camrotation);
			elseif camrotation.x > 1.5 then
				camrotation.x = 1.5;
				rotation:set(camrotation);
			end
			camera:setRotation(camrotation);
		end
	]]>
	</link>
	<overlay name="pickedlabel" type="label" owneronly="true" position="0.4/0.6" size="0.2/0.05" font="font.material.xml" label="" />
	
	<overlay name="hitpointlabel" type="label" owneronly="true" position="0.1/0.1" size="0.2/0.05" font="font.material.xml" label="HP: 100" />
	<link name="hitpointlink" type="script" source="hitpoints" place="local">
	<![CDATA[
		hitpointlabel:setLabel("HP: "..hitpoints:getInt());
	]]>
	</link>
</entity>
