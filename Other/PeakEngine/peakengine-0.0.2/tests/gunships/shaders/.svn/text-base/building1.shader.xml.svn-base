<Shader>
	<Context id="AMBIENT">
		<VertexShader>
			<InsCode code="utilityLib/vertCommon.glsl" />
			<DefCode>
			<![CDATA[
				uniform vec3 viewer;
				attribute vec2 texCoords0;
				attribute vec3 normal, tangent, bitangent;
				varying vec3 eyeTS;
				varying mat3 tsbMat;
				varying vec4 pos;
				varying vec2 texCoords;
			
				void main( void )
				{
					// Transform tangent space basis
					vec3 tsbTangent = normalize( calcWorldVec( tangent ) );
					vec3 tsbBitangent = normalize( calcWorldVec( bitangent ) );
					vec3 tsbNormal = normalize( calcWorldVec( normal ) );
			
					// Invert tangent space basis
					tsbMat = calcTanToWorldMat( tsbTangent, tsbBitangent, tsbNormal );
				
					// Calculate world space position
					pos = calcWorldPos( gl_Vertex );
					
					// Eye vector and eye vector in tangent space
					eyeTS = calcTanVec( viewer - pos.xyz, tsbTangent, tsbBitangent, tsbNormal );
			
					// Calculate texture coordinates and clip space position
					texCoords = texCoords0;
					gl_Position = gl_ModelViewProjectionMatrix * pos;
				}
			]]>
			</DefCode>
		</VertexShader>
		
		<FragmentShader>
			<InsCode code="utilityLib/fragLighting.glsl" />
			<DefCode>
			<![CDATA[
				uniform sampler2D tex0, tex1;
				uniform samplerCube tex7;
				varying vec3 eyeTS;
				varying mat3 tsbMat;
				varying vec4 pos;
				varying vec2 texCoords;
				
				void main( void )
				{
					texCoords.y = texCoords.y * 10.0;
					vec3 albedo = texture2D( tex0, texCoords.st ).rgb;
					vec3 normalMap = texture2D( tex1, texCoords.st ).rgb * 2.0 - 1.0;
					
					// Transform normal from tangent space to world space
					vec3 normal = tsbMat * normalMap;
					
					gl_FragColor.rgb = albedo * textureCube( tex7, normal ).rgb;
				}
			]]>
			</DefCode>
		</FragmentShader>
	</Context>
</Shader>
